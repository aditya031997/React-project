{"ast":null,"code":"import { emailRegex, strongRegex, phoneRegex } from \"./Regex\";\nconst Formvalidation = {\n  validateForm: (form, formErrors, validateFunc) => {\n    const errorObj = {};\n    Object.keys(formErrors).map(x => {\n      let refValue = null;\n      const msg = validateFunc(x, form[x], refValue);\n      if (msg) errorObj[x] = msg;\n    });\n    return errorObj;\n  },\n  Registration: (name, value) => {\n    switch (name) {\n      case \"name\":\n        if (!value) return \"name is required\";else return \"\";\n\n      case \"email\":\n        if (!value) return \"email is required\";else if (!emailRegex.test(value)) return \"Enter a valid email address\";else return \"\";\n\n      case \"password\":\n        if (!value) return \"password is required\";else if (!strongRegex.test(value)) return \"Enter a valid password\";else return \"\";\n\n      case \"contact\":\n        if (!value) return \" contact is required\";else if (!phoneRegex.test(value)) return \"enter valid phone no\";else return \"\";\n\n      case \"city\":\n        if (!value) return \"city is required\";else return \"\";\n\n      case \"state\":\n        if (!value) return \"state is required\";else return \"\";\n\n      default:\n        return \"\";\n    }\n  },\n  Login: (name, value) => {\n    switch (name) {\n      case \"email\":\n        if (!value) return \"email is missing\";else if (!emailRegex.test(value)) return \"enter valid email\";else return \"\";\n\n      case \"password\":\n        if (!value) return \"password is missing\";else return \"\";\n\n      default:\n        return \"\";\n    }\n  }\n};\nexport default Formvalidation;","map":{"version":3,"sources":["/home/pixlerlab/Desktop/reactLearning/React-project/src/component/FormValidation.js"],"names":["emailRegex","strongRegex","phoneRegex","Formvalidation","validateForm","form","formErrors","validateFunc","errorObj","Object","keys","map","x","refValue","msg","Registration","name","value","test","Login"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,WAArB,EAAkCC,UAAlC,QAAoD,SAApD;AACA,MAAMC,cAAc,GAAG;AACrBC,EAAAA,YAAY,EAAE,CAACC,IAAD,EAAOC,UAAP,EAAmBC,YAAnB,KAAoC;AAChD,UAAMC,QAAQ,GAAG,EAAjB;AACAC,IAAAA,MAAM,CAACC,IAAP,CAAYJ,UAAZ,EAAwBK,GAAxB,CAA6BC,CAAD,IAAO;AACjC,UAAIC,QAAQ,GAAG,IAAf;AACA,YAAMC,GAAG,GAAGP,YAAY,CAACK,CAAD,EAAIP,IAAI,CAACO,CAAD,CAAR,EAAaC,QAAb,CAAxB;AACA,UAAIC,GAAJ,EAASN,QAAQ,CAACI,CAAD,CAAR,GAAcE,GAAd;AACV,KAJD;AAKA,WAAON,QAAP;AACD,GAToB;AAUrBO,EAAAA,YAAY,EAAE,CAACC,IAAD,EAAOC,KAAP,KAAiB;AAC7B,YAAQD,IAAR;AACE,WAAK,MAAL;AACE,YAAI,CAACC,KAAL,EAAY,OAAO,kBAAP,CAAZ,KACK,OAAO,EAAP;;AACP,WAAK,OAAL;AACE,YAAI,CAACA,KAAL,EAAY,OAAO,mBAAP,CAAZ,KACK,IAAI,CAACjB,UAAU,CAACkB,IAAX,CAAgBD,KAAhB,CAAL,EAA6B,OAAO,6BAAP,CAA7B,KACA,OAAO,EAAP;;AACP,WAAK,UAAL;AACE,YAAI,CAACA,KAAL,EAAY,OAAO,sBAAP,CAAZ,KACK,IAAI,CAAChB,WAAW,CAACiB,IAAZ,CAAiBD,KAAjB,CAAL,EAA8B,OAAO,wBAAP,CAA9B,KACA,OAAO,EAAP;;AACP,WAAK,SAAL;AACE,YAAI,CAACA,KAAL,EAAY,OAAO,sBAAP,CAAZ,KACK,IAAI,CAACf,UAAU,CAACgB,IAAX,CAAgBD,KAAhB,CAAL,EAA6B,OAAO,sBAAP,CAA7B,KACA,OAAO,EAAP;;AACP,WAAK,MAAL;AACE,YAAI,CAACA,KAAL,EAAY,OAAO,kBAAP,CAAZ,KACK,OAAO,EAAP;;AACP,WAAK,OAAL;AACE,YAAI,CAACA,KAAL,EAAY,OAAO,mBAAP,CAAZ,KACK,OAAO,EAAP;;AACP;AACE,eAAO,EAAP;AAvBJ;AAyBD,GApCoB;AAsCrBE,EAAAA,KAAK,EAAE,CAACH,IAAD,EAAOC,KAAP,KAAiB;AACtB,YAAQD,IAAR;AACE,WAAK,OAAL;AACE,YAAI,CAACC,KAAL,EAAY,OAAO,kBAAP,CAAZ,KACK,IAAI,CAACjB,UAAU,CAACkB,IAAX,CAAgBD,KAAhB,CAAL,EAA6B,OAAO,mBAAP,CAA7B,KACA,OAAO,EAAP;;AACP,WAAK,UAAL;AACE,YAAI,CAACA,KAAL,EAAY,OAAO,qBAAP,CAAZ,KACK,OAAO,EAAP;;AACP;AACE,eAAO,EAAP;AATJ;AAWD;AAlDoB,CAAvB;AAqDA,eAAed,cAAf","sourcesContent":["import { emailRegex, strongRegex, phoneRegex } from \"./Regex\";\nconst Formvalidation = {\n  validateForm: (form, formErrors, validateFunc) => {\n    const errorObj = {};\n    Object.keys(formErrors).map((x) => {\n      let refValue = null;\n      const msg = validateFunc(x, form[x], refValue);\n      if (msg) errorObj[x] = msg;\n    });\n    return errorObj;\n  },\n  Registration: (name, value) => {\n    switch (name) {\n      case \"name\":\n        if (!value) return \"name is required\";\n        else return \"\";\n      case \"email\":\n        if (!value) return \"email is required\";\n        else if (!emailRegex.test(value)) return \"Enter a valid email address\";\n        else return \"\";\n      case \"password\":\n        if (!value) return \"password is required\";\n        else if (!strongRegex.test(value)) return \"Enter a valid password\";\n        else return \"\";\n      case \"contact\":\n        if (!value) return \" contact is required\";\n        else if (!phoneRegex.test(value)) return \"enter valid phone no\";\n        else return \"\";\n      case \"city\":\n        if (!value) return \"city is required\";\n        else return \"\";\n      case \"state\":\n        if (!value) return \"state is required\";\n        else return \"\";\n      default:\n        return \"\";\n    }\n  },\n\n  Login: (name, value) => {\n    switch (name) {\n      case \"email\":\n        if (!value) return \"email is missing\";\n        else if (!emailRegex.test(value)) return \"enter valid email\";\n        else return \"\";\n      case \"password\":\n        if (!value) return \"password is missing\";\n        else return \"\";\n      default:\n        return \"\";\n    }\n  },\n};\n\nexport default Formvalidation;\n"]},"metadata":{},"sourceType":"module"}